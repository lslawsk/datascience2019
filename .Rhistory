# group and summarize use
str(gapminder %>% group_by(continent))
#summarize gdp by continent
gdp_continent <- gapminder %>%
group_by(continent) %>%
summarize(mean_gdp = mean(gdpPercap))
View(gdp_continent)
library(ggplot2)
#summarize gdp by continent
gdp_continent <- gapminder %>%
group_by(continent) %>%
summarize(mean_gdp = mean(gdpPercap),
mean_life = mean(lifeExp))
View(gdp_continent)
View(gdp_continent)
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life)) +
geom_bar(stat = "identity") +
theme_bw()
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life)) +
geom_point(stat = "identity") +
theme_bw()
summary_plot
# mean pop for continents
pop_continent <- gapminder %>%
group_by(continent) %>%
summarize(mean_pop = mean(pop))
View(pop_continent)
View(pop_continent)
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=0, vjust=0)
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=1, vjust=1)
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=-1, vjust=1)
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=0.5, vjust=1)
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=-0.5, vjust=1)
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=0, vjust=1)
theme_bw()
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=0, vjust=-1)
theme_bw()
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=0, vjust=-0.5)
theme_bw()
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=0.5, vjust=-0.5)
theme_bw()
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=1, vjust=-0.5)
theme_bw()
summary_plot
summary_plot <- gdp_continent %>%
ggplot(aes(x = mean_gdp, y = mean_life, label = continent)) +
geom_point(stat = "identity") + geom_text(aes(label = continent),hjust=0, vjust=-0.5)
theme_bw()
summary_plot
# count() use and n() use
gapminder %>%
filter(year == 2002) %>%
count(continent, sort = TRUE)
# n() use
gapminder %>%
group_by(continent) %>%
summarize(se = sd(lifeExp)/sqrt(n()))
# mutate() use
# adds column for every observation
xy <- data.frame(x = rnorm(100),
y = rnorm(100))
head(xy)
# adding to original data frame
xyz <- xy %>%
mutate(z = x * y)
head(xyz)
gdpfull <- gapminder %>%
mutate(col = pop * gdpPercap) %>%
group_by(continent) %>%
summarize(gdp_perCont = sum(fullgdp))
fullgdp <- gapminder %>%
mutate(fullgdp = pop * gdpPercap) %>%
group_by(continent) %>%
summarize(gdp_perCont = sum(fullgdp))
View(gdp_continent)
View(gdp_continent)
View(pop_continent)
View(pop_continent)
View(gdp_continent)
View(gdp_continent)
fullgdp <- gapminder %>%
mutate(fullgdp = pop * gdpPercap)
head(fullgdp)
fullgdp <- gapminder %>%
mutate(full_gdp = pop * gdpPercap)
head(fullgdp)
gdp_perCont <- gapminder %>%
mutate(fullgdp_perCont = pop * gdpPercap) %>%
group_by(continent) %>%
summarize(full_gdp_Cont = sum(full_gdp))
fullgdp <- gapminder %>%
mutate(full_gdp = pop * gdpPercap)
head(fullgdp)
gdp_perCont <- gapminder %>%
mutate(fullgdp_perCont = pop * gdpPercap) %>%
group_by(continent) %>%
summarize(full_gdp_Cont = sum(full_gdp))
gdp_perCont <- gapminder %>%
mutate(full_gdp = pop * gdpPercap) %>%
group_by(continent) %>%
summarize(full_gdp_Cont = sum(full_gdp))
View(fullgdp)
View(fullgdp)
View(gdp_perCont)
View(gdp_perCont)
gdp_perCont
# intro to tidyr
library(tidyr)
# load bike data as sample messy dataset
gapminder <- read.csv("data/bikenet-change.csv")
library(tidyr)
library(dplyr)
library(ggplot2)
library(readr)
# load bike data as sample messy dataset
# bikenet <- read.csv("data/bikenet-change.csv") in base r
bikenet <- read_csv("data/bikenet-change.csv") # in tidyr
head(bikenet)
summary(bikenet)
summary(factor(bikenet$facility2013))
# tidy table before being able to analyze
# gather facility columns into single year variable
colnames(bikenet) # show for reference
bikenet_2 <- bikenet %>%
?gather
?gather
bikenet_2 <- bikenet %>%
gather(key = "year", value = "facility", facility2008:facility2013, na.rn = T) # if its missing then remove
bikenet_2 <- bikenet %>%
gather(key = "year", value = "facility", facility2008:facility2013, na.rm = T)
bikenet_2 <- bikenet %>%
gather(key = "year", value = "facility", facility2008:facility2013, na.rm = T) %>%
mutate(year = stringr::str_sub(year, start = -4))
head(bikenet_2)
# join/collapse columns for street and suffix into one
bikenet_2 <- bikenet_2 %>%
unite(col = "street", c("fname", "ftype", sep = " "))
# join/collapse columns for street and suffix into one
bikenet_2 <- bikenet_2 %>%
unite(col = "street", c("fname", "ftype"), sep = " ")
head(bikenet_2)
# separate street and suffix back to two
bikenet_2 <- bikenet_2 %>%
separate(street, c("street_name", "street_suffix"))
# gather facility columns into single year variable
colnames(bikenet) # show for reference for defining below
?gather
bikenet_2 <- bikenet %>%
gather(key = "year", value = "facility", facility2008:facility2013, na.rm = T) %>%
mutate(year = stringr::str_sub(year, start = -4)) # loads function from library stringr and grabs last 4 of string (the year)
head(bikenet_2)
bikenet_2 %>% filter(bikeid = 139730)
bikenet_2 %>% filter(bikeid == 139730)
summary(factor(bikenet$facility2013)) # see as factor but does not convert to factor
fac_lengths <- bikenet_2 %>%
filter(facility %in% c("BKE-LANE", "BKE-BLVD", "BKE-BUFF", "BKE-TRAK", "PTH-REMU")) %>%
group_by(year, facility) %>%
summarize(meters = sum(length_m)) %>%
mutate(miles = meters / 1609)
fac_lengths
# intro to graphing in ggplot2 as opposed to base r
plot <- ggplot(fac_lengths, aes(year, miles, group = facility)) # data, coordinate frame, how to rep on graph
plot + geom_line()
plot + geom_point()
# intro to graphing in ggplot2 as opposed to base r
plot <- ggplot(fac_lengths, aes(year, miles, group = facility),color = ) # data, coordinate frame, how to rep on graph
intro to graphing in ggplot2 as opposed to base r
plot <- ggplot(fac_lengths, aes(year, miles, group = facility,
color = facility)) # data, coordinate frame, how to rep on graph
plot + geom_line()
plot + geom_point()
plot + geom_line()
plot + geom_line() + scale_y_log10()
plot + geom_line() + labs(title = "Change in PDX Bikenet Facilities 2008-2013")
plot + geom_line() + labs(title = "Change in PDX Bikenet Facilities 2008-2013")
plot + geom_line() + labs(title = "Change in PDX Bikenet Facilities",
subtitle = "2008-2013")
plot + geom_line() + labs(title = "Change in PDX Bikenet Facilities",
subtitle = "2008-2013") +
xlab("Year") + ylab("Total Miles")
plot + geom_line() + labs(title = "Change in PDX Bikenet Facilities",
subtitle = "2008-2013",
caption = "source: Portland Metro") +
xlab("Year") + ylab("Total Miles")
# new plot
plot_2 <- ggplot(fac_lengths, aes(year, miles,
group = facility))
plot_2 + geom_line(size = 1, color = "blue") +
facet_wrap( ~ facility)
# practice after Part 1
install.packages("fivethirtyeight")
?fivethirteight
?fivethirtyeight
summary(bob_ross)
library(fivethirtyeight)
d <- bob_ross
summary(d)
colnames(d)
str(d)
library(ggplot2)
library(dplyr)
library(tidyr)
str(d %>% group_by(season)) # group_by treats dataframe as bins
View(sum_clouds)
#summarize clouds by season
season_clouds <- d %>%
group_by(season) %>%
summarize(sum_clouds = sum(clouds))
View(sum_clouds)
View(season_clouds)
p_clouds <- ggplot(season_clouds, aes(season, sum_clouds))
p_clouds + geom_bar()
p_clouds <- ggplot(sum_clouds, aes(season, season_clouds))
p_clouds + geom_bar()
p_clouds <- ggplot(season_clouds, aes(season, sum_clouds))
p_clouds + geom_bar()
p_clouds <- ggplot(season_clouds, aes(season, sum_clouds), group = season)
p_clouds + geom_bar()
?geom_bar()
barplot(season_clouds)
p_clouds <- ggplot(season_clouds, aes(season, sum_clouds), group = season)
p_clouds + geom_col()
p_clouds + geom_col()+
xlab("Season") + ylab("Cloud Count")
p_clouds + geom_col()+
labs(title = "Cloud Count by Season") +
xlab("Season") + ylab("Cloud Count")
p_clouds + geom_col()+
labs(title = "Cloud Count by Season",
caption = "source: FiveThirtyEight") +
xlab("Season") + ylab("Cloud Count")
colnames(d)
# Playing with mapping
# from jbroach on GitHub: ds2019 repository, code, mapping
library(dplyr)
# sp must be installed but no need to load
#install.packages("sp")
#install.packages("sf")
library(sf)
#install.packages("mapview")
library(mapview)
biketown <- read.csv("data/biketown-2018-trips.csv",
stringsAsFactors = F)
head(biketown)
hubs_start_sf <- biketown %>%
group_by(StartHub) %>%
summarise(lat = mean(StartLatitude), lng = mean(StartLongitude),
starts = n()) %>%
filter(!is.na(lat)) %>%
st_as_sf(coords = c("lng", "lat"),
crs = 4326, agr = "constant")
mapview(hubs_start_sf, zcol = "starts") # if basemap won't load in RStudio
# click "show in new window" button
#  in viewer pane (just right of sweep)
mapview(hubs_start_sf, cex = "starts", legend = T)
mapview(hubs_start_sf, zcol = "starts", cex = "starts")
hubs_end <- biketown %>%
group_by(EndHub) %>%
summarise(lat = mean(EndLatitude), lng = mean(EndLongitude),
ends = n())
hubs_end_sf <- hubs_end %>%
filter(!is.na(lat)) %>%
st_as_sf(coords = c("lng", "lat"),
crs = 4326, agr = "constant")
mapview(hubs_end_sf, zcol = "ends", cex = "ends")
hubs_ratio_sf <- inner_join(hubs_start_sf, hubs_end,
by = c("StartHub" = "EndHub")) %>%
mutate(starts_to_ends = starts / ends, ends_to_starts = ends / starts)
summary(hubs_ratio_sf)
mapview(hubs_ratio_sf, zcol = "starts_to_ends", cex = "starts_to_ends")
mapview(hubs_ratio_sf, zcol = "ends_to_starts", cex = "ends_to_starts")
m1 <- mapview(hubs_ratio_sf, zcol = "starts_to_ends",
cex = "starts_to_ends", legend = F)
m2 <- mapview(hubs_ratio_sf, zcol = "ends_to_starts",
cex = "ends_to_starts", legend = F)
sync(m1, m2)
# Playing with mapping
# from jbroach on GitHub: ds2019 repository, code, mapping
library(dplyr)
# sp must be installed but no need to load
install.packages("sp")
install.packages("sf")
library(sf)
install.packages("mapview")
library(mapview)
biketown <- read.csv("data/biketown-2018-trips.csv",
stringsAsFactors = F)
head(biketown)
hubs_start_sf <- biketown %>%
group_by(StartHub) %>%
summarise(lat = mean(StartLatitude), lng = mean(StartLongitude),
starts = n()) %>%
filter(!is.na(lat)) %>%
st_as_sf(coords = c("lng", "lat"),
crs = 4326, agr = "constant")
mapview(hubs_start_sf, zcol = "starts") # if basemap won't load in RStudio
# click "show in new window" button
#  in viewer pane (just right of sweep)
mapview(hubs_start_sf, cex = "starts", legend = T)
mapview(hubs_start_sf, zcol = "starts", cex = "starts")
hubs_end <- biketown %>%
group_by(EndHub) %>%
summarise(lat = mean(EndLatitude), lng = mean(EndLongitude),
ends = n())
hubs_end_sf <- hubs_end %>%
filter(!is.na(lat)) %>%
st_as_sf(coords = c("lng", "lat"),
crs = 4326, agr = "constant")
mapview(hubs_end_sf, zcol = "ends", cex = "ends")
hubs_ratio_sf <- inner_join(hubs_start_sf, hubs_end,
by = c("StartHub" = "EndHub")) %>%
mutate(starts_to_ends = starts / ends, ends_to_starts = ends / starts)
summary(hubs_ratio_sf)
mapview(hubs_ratio_sf, zcol = "starts_to_ends", cex = "starts_to_ends")
mapview(hubs_ratio_sf, zcol = "ends_to_starts", cex = "ends_to_starts")
m1 <- mapview(hubs_ratio_sf, zcol = "starts_to_ends",
cex = "starts_to_ends", legend = F)
m2 <- mapview(hubs_ratio_sf, zcol = "ends_to_starts",
cex = "ends_to_starts", legend = F)
sync(m1, m2)
summary(d)
colnames(d)
str(d)
library(fivethirtyeight)
library(dplyr)
library(tidyr)
library(ggplot2)
d <- bob_ross
summary(d)
colnames(d)
str(d)
str(d %>% group_by(season)) # group_by treats dataframe as bins
rownames(d)
View(d)
str(d)
colnames(d)
# image sum by season
im_by_season <- d %>%
group_by(season) %>%
summarize(s_cirrus = mean(cirrus)) %>%
summarize(s_clouds = mean(clouds)) %>%
summarize(s_cumulus = mean(cumulus)) %>%
summarize(s_fog = mean(fog))
# image sum by season
im_by_season <- d %>%
group_by(season) %>%
summarize(s_cirrus = sum(cirrus)) %>%
summarize(s_clouds = sum(clouds)) %>%
summarize(s_cumulus = sum(cumulus)) %>%
summarize(s_fog = sum(fog))
im_by_season
View(season_clouds)
d <- bob_ross
summary(d)
colnames(d)
View(d)
str(d)
str(d %>% group_by(season)) # group_by treats dataframe as bins
#summarize clouds by season
season_clouds <- d %>%
group_by(season) %>%
summarize(sum_clouds = sum(clouds))
View(season_clouds)
# bar chart of cloud counts
p_clouds <- ggplot(season_clouds, aes(season, sum_clouds), group = season)
p_clouds + geom_col()+
labs(title = "Cloud Count by Season",
caption = "source: FiveThirtyEight") +
xlab("Season") + ylab("Cloud Count")
# image sum by season
im_by_season <- d %>%
group_by(season) %>%
summarize(s_cirrus = sum(cirrus)) %>%
summarize(s_clouds = sum(clouds)) %>%
summarize(s_cumulus = sum(cumulus)) %>%
summarize(s_fog = sum(fog))
im_by_season
c_by_season <- d %>%
group_by(season) %>%
summarize(s_cirrus = sum(cirrus)) %>%
summarize(s_clouds = sum(clouds)) %>%
summarize(s_cumulus = sum(cumulus)) %>%
summarize(s_fog = sum(fog))
View(c_by_season)
s_fog = sum(fog))
# image sum by season
c_by_season <- d %>%
group_by(season) %>%
summarize(s_cirrus = sum(cirrus),
s_clouds = sum(clouds),
s_cumulus = sum(cumulus),
s_fog = sum(fog))
View(c_by_season)
c_by_season <- d %>%
group_by(season) %>%
summarize(s_cirrus = sum(cirrus),
s_clouds = sum(clouds),
s_cumulus = sum(cumulus),
s_fog = sum(fog),
s_c_all = sum(s_cirrus, s_clouds, s_cumulus, S_fog))
View(c_by_season)
c_by_season <- d %>%
group_by(season) %>%
summarize(s_cirrus = sum(cirrus),
s_clouds = sum(clouds),
s_cumulus = sum(cumulus),
s_fog = sum(fog))
s_c_all <- c_by_season %>%
group_by(season) %>%
mutate(s_c_all = s_cirrus + s_clouds + s_cumulus + s_fog))
s_c_all <- c_by_season %>%
group_by(season) %>%
mutate(s_c_all = s_cirrus + s_clouds + s_cumulus + s_fog)
View(c_by_season)
View(s_c_all)
View(s_c_all)
p_c <- ggplot(s_c_all, aes(season, s_c_all), group = season)
p_c + geom_bar()
p_c + geom_col()
p_c + geom_bar()
p_c <- ggplot(c_by_season, aes(season, c_by_season, fill = c_by_season), group = season)
p_c + geom_bar()
p_c <- ggplot(c_by_season, aes(season, s_c_all, fill = c_by_season), group = season)
p_c + geom_bar()
p_c <- ggplot(c_by_season, aes(season, s_c_all), group = season)
p_c + geom_bar(position="stack", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, s_c_all), group = season)
p_clouds <- ggplot(season_clouds, aes(season, sum_clouds), group = season)
p_clouds + geom_col()+
labs(title = "Cloud Count by Season",
caption = "source: FiveThirtyEight") +
xlab("Season") + ylab("Cloud Count")
p_c <- ggplot(c_by_season, aes(season, s_c_all), group = season)
p_c + geom_bar(position="stack", stat = "identity")
View(s_c_all)
View(s_c_all)
View(season_clouds)
View(season_clouds)
View(p_clouds)
View(p_clouds)
View(c_by_season)
View(c_by_season)
p_c <- ggplot(c_by_season, aes(season, c_by_season), group = season)
p_c + geom_bar(position="stack", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, c_by_season))
p_c + geom_bar(position="stack", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, c_by_season))
p_c + geom_bar(position="stack", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, s_c_all))
p_c + geom_bar(position="stack", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, s_c_all, fill=c_by_season))
p_c + geom_bar(position="stack", stat = "identity")
p_c + geom_bar(position="fill", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, s_c_all, fill=c_by_season))
p_c + geom_bar(position="fill", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, s_c_all))
p_c + geom_bar(position="stack", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, ))
p_c + geom_bar(position="stack", stat = "identity")
p_c <- ggplot(c_by_season, aes(season, c_by_season))
p_c + geom_bar(position="stack", stat = "identity")
s_c_all_2 <- rbind(
data.frame(season, "count" = s_cirrus, "type"="Cirrus"),
data.frame(year, "count" = s_clouds, "type"="Clouds"),
data.frame(year, "count" = s_cumulus, "type"="Cumulus"),
data.frame(year, "count" = s_fog, "type"="Fog"),
)
s_c_all_2 <- rbind(
data.frame(season, "count" = s_cirrus, "type"="Cirrus"),
data.frame(season, "count" = s_clouds, "type"="Clouds"),
data.frame(season, "count" = s_cumulus, "type"="Cumulus"),
data.frame(season, "count" = s_fog, "type"="Fog"),
)
#https://stackoverflow.com/questions/40916252/ggplot-stacked-bar-graph-with-2-columns
s_c_all_2 <- rbind(
data.frame(season, "count" = s_cirrus, "type"="Cirrus"),
data.frame(season, "count" = s_clouds, "type"="Clouds"),
data.frame(season, "count" = s_cumulus, "type"="Cumulus"),
data.frame(season, "count" = s_fog, "type"="Fog")
)
